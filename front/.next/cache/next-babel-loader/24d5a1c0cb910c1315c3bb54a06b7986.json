{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/store/configStore.js"],"names":["applyMiddleware","compose","createStore","createSagaMiddleware","createWrapper","composeWithDevTools","reducer","rootSaga","configStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,QAAMO,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QACbV,OAAO,CAACD,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CADM,GAEbL,mBAAmB,CAACL,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CAFvB;AAGA,QAAME,KAAK,GAAGV,WAAW,CAACI,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACD,CATD;;AAWA,MAAMG,OAAO,GAAGX,aAAa,CAACI,WAAD,EAAc;AAAEQ,EAAAA,KAAK;AAAP,CAAd,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}