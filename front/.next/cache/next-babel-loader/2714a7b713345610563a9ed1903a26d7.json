{"ast":null,"code":"var _jsxFileName = \"/Users/minuk/Desktop/React-TradeMarket/front/components/Comment.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { List, Comment, Avatar, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport Recomment from './Recomment';\nimport { REMOVE_COMMENT_REQUEST } from '../reducers/product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Comments = function Comments(_ref) {\n  _s();\n\n  var comment = _ref.comment;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      commentId = _useState[0],\n      setCommentId = _useState[1];\n\n  var onRemoveComment = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_COMMENT_REQUEST,\n      data: commentId\n    });\n  }, [id, commentId]);\n  return /*#__PURE__*/_jsxDEV(List, {\n    style: {\n      width: 400\n    },\n    header: \"\".concat(comment.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: comment,\n    renderItem: function renderItem(item) {\n      return /*#__PURE__*/_jsxDEV(List.Item, {\n        children: /*#__PURE__*/_jsxDEV(Comment, {\n          author: item.User.nickname,\n          avatar: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              href: \"/user/\".concat(item.User.id),\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 22\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, _this), id && item.User.id === id ? /*#__PURE__*/_jsxDEV(Button, {\n              danger: \"true\",\n              onClick: onRemoveComment,\n              children: [\"\\uC0AD\\uC81C\", setCommentId(item.id)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 21\n            }, _this) : '', /*#__PURE__*/_jsxDEV(Recomment, {\n              comment: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true),\n          content: item.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, _this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Comments, \"/gYY5q4rQbXQN+KrAzs1w2quqe4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Comments;\nComments.propTypes = {\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/components/Comment.js"],"names":["React","useCallback","useState","useDispatch","useSelector","Link","List","Comment","Avatar","Button","PropTypes","Recomment","REMOVE_COMMENT_REQUEST","Comments","comment","id","state","user","me","dispatch","commentId","setCommentId","onRemoveComment","alert","type","data","width","length","item","User","nickname","content","propTypes","arrayOf","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { List, Comment, Avatar, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport Recomment from './Recomment';\nimport { REMOVE_COMMENT_REQUEST } from '../reducers/product';\n\nconst Comments = ({ comment }) => {\n  const id = useSelector((state) => state.user.me?.id);\n  const dispatch = useDispatch();\n  const [commentId, setCommentId] = useState('');\n\n  const onRemoveComment = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: REMOVE_COMMENT_REQUEST,\n      data: commentId,\n    });\n  }, [id, commentId]);\n\n  return (\n    <List\n      style={{ width: 400 }}\n      header={`${comment.length}개의 댓글`}\n      itemLayout=\"horizontal\"\n      dataSource={comment}\n      renderItem={(item) => (\n        <List.Item key={item.id}>\n          <Comment\n            author={item.User.nickname}\n            avatar={(\n              <>\n                <Link href={`/user/${item.User.id}`}>\n                  <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                </Link>\n                {id && item.User.id === id\n                  ? (\n                    <Button danger=\"true\" onClick={onRemoveComment}>\n                      삭제\n                      {setCommentId(item.id)}\n                    </Button>\n                  ) : ''}\n                <Recomment comment={item} />\n              </>\n            )}\n            content={item.content}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nComments.propTypes = {\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}