{"ast":null,"code":"var _jsxFileName = \"/Users/minuk/Desktop/React-TradeMarket/front/components/Comment.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { List, Comment, Avatar, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport Recomment from './Recomment';\nimport { REMOVE_COMMENT_REQUEST } from '../reducers/product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Comments = ({\n  comment\n}) => {\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const dispatch = useDispatch(); // const [commentId, setCommentId] = useState('');\n\n  const onRemoveComment = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_COMMENT_REQUEST,\n      data: comment.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(List, {\n    style: {\n      width: 400\n    },\n    header: `${comment.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: comment,\n    renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n      children: /*#__PURE__*/_jsxDEV(Comment, {\n        author: item.User.nickname,\n        avatar: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${item.User.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: item.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this), id && item.User.id === id ? /*#__PURE__*/_jsxDEV(Button, {\n            danger: \"true\",\n            onClick: onRemoveComment,\n            children: \"\\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this) : '', /*#__PURE__*/_jsxDEV(Recomment, {\n            comment: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true),\n        content: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\nComments.propTypes = {\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nexport default Comments;","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/components/Comment.js"],"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","Link","List","Comment","Avatar","Button","PropTypes","Recomment","REMOVE_COMMENT_REQUEST","Comments","comment","id","state","user","me","dispatch","onRemoveComment","alert","type","data","width","length","item","User","nickname","content","propTypes","arrayOf","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,MAAhC,QAA8C,MAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,sBAAT,QAAuC,qBAAvC;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAChC,QAAMC,EAAE,GAAGX,WAAW,CAAEY,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;AACA,QAAMI,QAAQ,GAAGhB,WAAW,EAA5B,CAFgC,CAGhC;;AAEA,QAAMiB,eAAe,GAAGpB,WAAW,CAAC,MAAM;AACxC,QAAI,CAACe,EAAL,EAAS;AACP,aAAOM,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,WAAOF,QAAQ,CAAC;AACdG,MAAAA,IAAI,EAAEV,sBADQ;AAEdW,MAAAA,IAAI,EAAET,OAAO,CAACC;AAFA,KAAD,CAAf;AAID,GARkC,EAQhC,CAACA,EAAD,CARgC,CAAnC;AAUA,sBACE,QAAC,IAAD;AACE,IAAA,KAAK,EAAE;AAAES,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,MAAM,EAAG,GAAEV,OAAO,CAACW,MAAO,OAF5B;AAGE,IAAA,UAAU,EAAC,YAHb;AAIE,IAAA,UAAU,EAAEX,OAJd;AAKE,IAAA,UAAU,EAAGY,IAAD,iBACV,QAAC,IAAD,CAAM,IAAN;AAAA,6BACE,QAAC,OAAD;AACE,QAAA,MAAM,EAAEA,IAAI,CAACC,IAAL,CAAUC,QADpB;AAEE,QAAA,MAAM,eACJ;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAG,SAAQF,IAAI,CAACC,IAAL,CAAUZ,EAAG,EAAlC;AAAA,mCACE;AAAA,qCAAG,QAAC,MAAD;AAAA,0BAASW,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmB,CAAnB;AAAT;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,EAIGb,EAAE,IAAIW,IAAI,CAACC,IAAL,CAAUZ,EAAV,KAAiBA,EAAvB,gBAEG,QAAC,MAAD;AAAQ,YAAA,MAAM,EAAC,MAAf;AAAsB,YAAA,OAAO,EAAEK,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFH,GAKK,EATR,eAUE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAEM;AAApB;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA,wBAHJ;AAgBE,QAAA,OAAO,EAAEA,IAAI,CAACG;AAhBhB;AAAA;AAAA;AAAA;AAAA;AADF,OAAgBH,IAAI,CAACX,EAArB;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA7CD;;AA+CAF,QAAQ,CAACiB,SAAT,GAAqB;AACnBhB,EAAAA,OAAO,EAAEJ,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACsB,MAA5B,EAAoCC;AAD1B,CAArB;AAIA,eAAepB,QAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { List, Comment, Avatar, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport Recomment from './Recomment';\nimport { REMOVE_COMMENT_REQUEST } from '../reducers/product';\n\nconst Comments = ({ comment }) => {\n  const id = useSelector((state) => state.user.me?.id);\n  const dispatch = useDispatch();\n  // const [commentId, setCommentId] = useState('');\n\n  const onRemoveComment = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: REMOVE_COMMENT_REQUEST,\n      data: comment.id,\n    });\n  }, [id]);\n\n  return (\n    <List\n      style={{ width: 400 }}\n      header={`${comment.length}개의 댓글`}\n      itemLayout=\"horizontal\"\n      dataSource={comment}\n      renderItem={(item) => (\n        <List.Item key={item.id}>\n          <Comment\n            author={item.User.nickname}\n            avatar={(\n              <>\n                <Link href={`/user/${item.User.id}`}>\n                  <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                </Link>\n                {id && item.User.id === id\n                  ? (\n                    <Button danger=\"true\" onClick={onRemoveComment}>\n                      삭제\n                    </Button>\n                  ) : ''}\n                <Recomment comment={item} />\n              </>\n            )}\n            content={item.content}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nComments.propTypes = {\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}