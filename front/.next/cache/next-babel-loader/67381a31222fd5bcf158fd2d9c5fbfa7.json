{"ast":null,"code":"import { all, fork, put, call, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE, LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_RECOMMENT_REQUEST, ADD_RECOMMENT_SUCCESS, ADD_RECOMMENT_FAILURE } from '../reducers/product';\nimport { ADD_PRODUCT_TO_ME } from '../reducers/user';\n\nfunction addProductAPI(data) {\n  return axios.post('/product', data);\n}\n\nfunction* addProduct(action) {\n  try {\n    const result = yield call(addProductAPI, action.data);\n    yield put({\n      type: ADD_PRODUCT_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_PRODUCT_TO_ME,\n      data: result.data.id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_PRODUCT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadProductsAPI(lastId) {\n  return axios.get(`/products?lastId=${lastId || 0}`);\n}\n\nfunction* loadProducts(action) {\n  try {\n    const result = yield call(loadProductsAPI, action.lastId);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/product/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/product/${data.productId}/comment`, data); // POST /product/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addRecommentAPI(data) {\n  return axios.post(`/product/${data.commentId}/recomment`, data); // POST /product/1/recomment\n}\n\nfunction* addRecomment(action) {\n  try {\n    const result = yield call(addRecommentAPI, action.data);\n    yield put({\n      type: ADD_RECOMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_RECOMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddProduct() {\n  yield takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n}\n\nfunction* watchLoadProducts() {\n  yield throttle(5000, LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchAddRecomment() {\n  yield takeLatest(ADD_RECOMMENT_REQUEST, addRecomment);\n}\n\nexport default function* productSaga() {\n  yield all([fork(watchLoadProducts), fork(watchAddProduct), fork(watchUploadImages), fork(watchAddComment), fork(watchAddRecomment)]);\n}","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/sagas/product.js"],"names":["all","fork","put","call","takeLatest","throttle","axios","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_RECOMMENT_REQUEST","ADD_RECOMMENT_SUCCESS","ADD_RECOMMENT_FAILURE","ADD_PRODUCT_TO_ME","addProductAPI","data","post","addProduct","action","result","type","id","error","response","loadProductsAPI","lastId","get","loadProducts","uploadImagesAPI","uploadImages","err","addCommentAPI","productId","addComment","addRecommentAPI","commentId","addRecomment","watchAddProduct","watchLoadProducts","watchUploadImages","watchAddComment","watchAddRecomment","productSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, call, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE,\n  LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE,\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  ADD_RECOMMENT_REQUEST, ADD_RECOMMENT_SUCCESS, ADD_RECOMMENT_FAILURE,\n} from '../reducers/product';\nimport { ADD_PRODUCT_TO_ME } from '../reducers/user';\n\nfunction addProductAPI(data) {\n  return axios.post('/product', data);\n}\nfunction* addProduct(action) {\n  try {\n    const result = yield call(addProductAPI, action.data);\n    yield put({\n      type: ADD_PRODUCT_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_PRODUCT_TO_ME,\n      data: result.data.id,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_PRODUCT_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction loadProductsAPI(lastId) {\n  return axios.get(`/products?lastId=${lastId || 0}`);\n}\nfunction* loadProducts(action) {\n  try {\n    const result = yield call(loadProductsAPI, action.lastId);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/product/images', data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/product/${data.productId}/comment`, data); // POST /product/1/comment\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addRecommentAPI(data) {\n  return axios.post(`/product/${data.commentId}/recomment`, data); // POST /product/1/recomment\n}\nfunction* addRecomment(action) {\n  try {\n    const result = yield call(addRecommentAPI, action.data);\n    yield put({\n      type: ADD_RECOMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_RECOMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddProduct() {\n  yield takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n}\nfunction* watchLoadProducts() {\n  yield throttle(5000, LOAD_PRODUCTS_REQUEST, loadProducts);\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchAddRecomment() {\n  yield takeLatest(ADD_RECOMMENT_REQUEST, addRecomment);\n}\n\nexport default function* productSaga() {\n  yield all([\n    fork(watchLoadProducts),\n    fork(watchAddProduct),\n    fork(watchUploadImages),\n    fork(watchAddComment),\n    fork(watchAddRecomment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}