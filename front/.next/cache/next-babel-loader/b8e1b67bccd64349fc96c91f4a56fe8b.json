{"ast":null,"code":"import { all, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/sagas/user.js"],"names":["all","fork","put","takeLatest","call","axios","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loadMyInfoAPI","get","loadMyInfo","action","result","data","type","err","error","response","logInAPI","post","logIn","logOutAPI","logOut","signUpAPI","signUp","console","log","watchLoadMyInfo","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE,\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n} from '../reducers/user';\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI, action.data);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLoadMyInfo),\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}