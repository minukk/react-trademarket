{"ast":null,"code":"import { all, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/sagas/user.js"],"names":["all","fork","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","result","type","error","response","logOutAPI","logOut","signUpAPI","signUp","console","log","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOX,KAAK,CAACY,IAAN,CAAW,aAAX,EAA0BD,IAA1B,CAAP;AACD;;AACD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,IAAI,CAACW,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB;AACA,UAAMd,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEd,cADE;AAERS,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOM,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEb,cADE;AAERc,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFd,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOnB,KAAK,CAACY,IAAN,CAAW,cAAX,CAAP;AACD;;AACD,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMrB,IAAI,CAACoB,SAAD,CAAV;AACA,UAAMtB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEX;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOY,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEV,eADE;AAERW,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFd,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,CAAmBV,IAAnB,EAAyB;AACvB,SAAOX,KAAK,CAACY,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACD;;AACD,UAAUW,MAAV,CAAiBR,MAAjB,EAAyB;AACvB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,IAAI,CAACsB,SAAD,EAAYP,MAAM,CAACH,IAAnB,CAAzB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOS,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEP,eADE;AAERQ,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUc,UAAV,GAAuB;AACrB,QAAM3B,UAAU,CAACG,cAAD,EAAiBY,KAAjB,CAAhB;AACD;;AAED,UAAUa,WAAV,GAAwB;AACtB,QAAM5B,UAAU,CAACM,eAAD,EAAkBgB,MAAlB,CAAhB;AACD;;AAED,UAAUO,WAAV,GAAwB;AACtB,QAAM7B,UAAU,CAACS,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUM,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CACRC,IAAI,CAAC6B,UAAD,CADI,EAER7B,IAAI,CAAC8B,WAAD,CAFI,EAGR9B,IAAI,CAAC+B,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n} from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}