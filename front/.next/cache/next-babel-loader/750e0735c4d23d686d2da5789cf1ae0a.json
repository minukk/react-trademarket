{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addProduct),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadProducts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddProduct),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadProducts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(productSaga);\n\nimport { all, fork, put, call, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE, LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE } from '../reducers/product';\nimport { ADD_PRODUCT_TO_ME } from '../reducers/user';\n\nfunction addProductAPI(data) {\n  return axios.post('/product', data);\n}\n\nfunction addProduct(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addProduct$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addProductAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_PRODUCT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_PRODUCT_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_PRODUCT_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction loadProductsAPI(lastId) {\n  return axios.get(\"/products?lastId=\".concat(lastId || 0));\n}\n\nfunction loadProducts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadProducts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadProductsAPI, action.lastId);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_PRODUCTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOAD_PRODUCTS_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchAddProduct() {\n  return _regeneratorRuntime.wrap(function watchAddProduct$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLoadProducts() {\n  return _regeneratorRuntime.wrap(function watchLoadProducts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return throttle(5000, LOAD_PRODUCTS_REQUEST, loadProducts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function productSaga() {\n  return _regeneratorRuntime.wrap(function productSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLoadProducts), fork(watchAddProduct)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/sagas/product.js"],"names":["addProduct","loadProducts","watchAddProduct","watchLoadProducts","productSaga","all","fork","put","call","takeLatest","throttle","axios","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","ADD_PRODUCT_TO_ME","addProductAPI","data","post","action","result","type","id","error","response","loadProductsAPI","lastId","get"],"mappings":";;oDAYUA,U;qDAsBAC,Y;qDAeAC,e;qDAGAC,iB;qDAIeC,W;;AAxDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,mBADF,EACuBC,mBADvB,EAC4CC,mBAD5C,EAEEC,qBAFF,EAEyBC,qBAFzB,EAEgDC,qBAFhD,QAGO,qBAHP;AAIA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOT,KAAK,CAACU,IAAN,CAAW,UAAX,EAAuBD,IAAvB,CAAP;AACD;;AACD,SAAUpB,UAAV,CAAqBsB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMd,IAAI,CAACW,aAAD,EAAgBG,MAAM,CAACF,IAAvB,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEX,mBADE;AAERO,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAOI,iBAAMb,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEN,iBADE;AAERE,YAAAA,IAAI,EAAEG,MAAM,CAACH,IAAP,CAAYK;AAFV,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAMlB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEV,mBADE;AAERY,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAeP;AAFd,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASQ,eAAT,CAAyBC,MAAzB,EAAiC;AAC/B,SAAOlB,KAAK,CAACmB,GAAN,4BAA8BD,MAAM,IAAI,CAAxC,EAAP;AACD;;AACD,SAAU5B,YAAV,CAAuBqB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMd,IAAI,CAACoB,eAAD,EAAkBN,MAAM,CAACO,MAAzB,CAAV;;AAFnB;AAEUN,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAER,qBADE;AAERI,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMb,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEP,qBADE;AAERS,YAAAA,KAAK,EAAE,aAAMC,QAAN,CAAeP;AAFd,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUlB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACG,mBAAD,EAAsBZ,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,QAAQ,CAAC,IAAD,EAAOK,qBAAP,EAA8Bd,YAA9B,CAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACH,iBAAD,CADI,EAERG,IAAI,CAACJ,eAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, call, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE,\n  LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE,\n} from '../reducers/product';\nimport { ADD_PRODUCT_TO_ME } from '../reducers/user';\n\nfunction addProductAPI(data) {\n  return axios.post('/product', data);\n}\nfunction* addProduct(action) {\n  try {\n    const result = yield call(addProductAPI, action.data);\n    yield put({\n      type: ADD_PRODUCT_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_PRODUCT_TO_ME,\n      data: result.data.id,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_PRODUCT_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction loadProductsAPI(lastId) {\n  return axios.get(`/products?lastId=${lastId || 0}`);\n}\nfunction* loadProducts(action) {\n  try {\n    const result = yield call(loadProductsAPI, action.lastId);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchAddProduct() {\n  yield takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n}\nfunction* watchLoadProducts() {\n  yield throttle(5000, LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nexport default function* productSaga() {\n  yield all([\n    fork(watchLoadProducts),\n    fork(watchAddProduct),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}