{"ast":null,"code":"var _jsxFileName = \"/Users/minuk/Desktop/React-TradeMarket/front/components/Comment.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { List, Comment, Avatar, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport Recomment from './Recomment';\nimport RecommentForm from './RecommentForm';\nimport { REMOVE_COMMENT_REQUEST } from '../reducers/product';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Comments = function Comments(_ref) {\n  _s();\n\n  var comment = _ref.comment;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var dispatch = useDispatch(); // const [commentId, setCommentId] = useState('');\n\n  var _useState = useState(false),\n      recommentOpen = _useState[0],\n      setRecommentOpen = _useState[1];\n\n  var recommentFormOpen = useCallback(function () {\n    setRecommentOpen(function (prev) {\n      return !prev;\n    });\n  }, []);\n\n  var onRemoveComment = function onRemoveComment(item) {\n    return function () {\n      if (!id) {\n        return alert('로그인이 필요합니다.');\n      }\n\n      return dispatch({\n        type: REMOVE_COMMENT_REQUEST,\n        data: item\n      });\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    header: \"\".concat(comment.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    locale: {\n      emptyText: '댓글을 작성해주세요.'\n    },\n    dataSource: comment,\n    renderItem: function renderItem(item) {\n      return /*#__PURE__*/_jsxDEV(List.Item, {\n        children: /*#__PURE__*/_jsxDEV(Comment, {\n          author: item.User.nickname,\n          content: item.content,\n          avatar: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              href: \"/user/\".concat(item.User.id),\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 22\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: id && item.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  danger: \"true\",\n                  onClick: onRemoveComment(item),\n                  children: \"\\uC0AD\\uC81C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 25\n                }, _this)]\n              }, void 0, true) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                position: 'absolute',\n                right: -300\n              },\n              onClick: recommentFormOpen,\n              children: \"\\uB2F5\\uAE00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, _this), recommentOpen && /*#__PURE__*/_jsxDEV(RecommentForm, {\n              style: {\n                position: 'absolute',\n                right: -300\n              },\n              comment: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 35\n            }, _this), /*#__PURE__*/_jsxDEV(Recomment, {\n              comment: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, _this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Comments, \"XBifds8gOEKcBqIWkcMEokUJjHM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Comments;\nComments.propTypes = {\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/components/Comment.js"],"names":["React","useState","useCallback","useDispatch","useSelector","Link","List","Comment","Avatar","Button","PropTypes","Recomment","RecommentForm","REMOVE_COMMENT_REQUEST","Comments","comment","id","state","user","me","dispatch","recommentOpen","setRecommentOpen","recommentFormOpen","prev","onRemoveComment","item","alert","type","data","length","emptyText","User","nickname","content","position","right","propTypes","arrayOf","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport { List, Comment, Avatar, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport Recomment from './Recomment';\nimport RecommentForm from './RecommentForm';\nimport { REMOVE_COMMENT_REQUEST } from '../reducers/product';\n\nconst Comments = ({ comment }) => {\n  const id = useSelector((state) => state.user.me?.id);\n  const dispatch = useDispatch();\n  // const [commentId, setCommentId] = useState('');\n  const [recommentOpen, setRecommentOpen] = useState(false);\n  const recommentFormOpen = useCallback(() => {\n    setRecommentOpen((prev) => !prev);\n  }, []);\n\n  const onRemoveComment = (item) => () => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: REMOVE_COMMENT_REQUEST,\n      data: item,\n    });\n  };\n\n  return (\n    <List\n      header={`${comment.length}개의 댓글`}\n      itemLayout=\"horizontal\"\n      locale={{ emptyText: '댓글을 작성해주세요.' }}\n      dataSource={comment}\n      renderItem={(item) => (\n        <List.Item key={item.id}>\n          <Comment\n            author={item.User.nickname}\n            content={item.content}\n            avatar={(\n              <>\n                <Link href={`/user/${item.User.id}`}>\n                  <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                </Link>\n                <div>\n                  {id && item.User.id === id\n                    ? (\n                      <>\n                        <Button danger=\"true\" onClick={onRemoveComment(item)}>\n                          삭제\n                        </Button>\n                        <br />\n                      </>\n                    ) : ''}\n                </div>\n                <Button style={{ position: 'absolute', right: -300 }} onClick={recommentFormOpen}>답글</Button>\n                {recommentOpen && <RecommentForm style={{ position: 'absolute', right: -300 }} comment={item} />}\n                <Recomment comment={item} />\n              </>\n            )}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nComments.propTypes = {\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}