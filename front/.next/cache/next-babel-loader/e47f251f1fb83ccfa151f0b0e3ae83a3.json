{"ast":null,"code":"import { all, fork, put, call, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE, LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE } from '../reducers/product';\nimport { ADD_PRODUCT_TO_ME } from '../reducers/user';\n\nfunction addProductAPI(data) {\n  return axios.post('/product', data);\n}\n\nfunction* addProduct(action) {\n  try {\n    const result = yield call(addProductAPI, action.data);\n    yield put({\n      type: ADD_PRODUCT_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_PRODUCT_TO_ME,\n      data: result.data.id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_PRODUCT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadProductsAPI(lastId) {\n  return axios.get(`/products?lastId=${lastId || 0}`);\n}\n\nfunction* loadProducts(action) {\n  try {\n    const result = yield call(loadProductsAPI, action.lastId);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchAddProduct() {\n  yield takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n}\n\nfunction* watchLoadProducts() {\n  yield throttle(5000, LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nexport default function* productSaga() {\n  yield all([fork(watchLoadProducts), fork(watchAddProduct)]);\n}","map":{"version":3,"sources":["/Users/minuk/Desktop/React-TradeMarket/front/sagas/product.js"],"names":["all","fork","put","call","takeLatest","throttle","axios","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","ADD_PRODUCT_TO_ME","addProductAPI","data","post","addProduct","action","result","type","id","error","response","loadProductsAPI","lastId","get","loadProducts","watchAddProduct","watchLoadProducts","productSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,mBADF,EACuBC,mBADvB,EAC4CC,mBAD5C,EAEEC,qBAFF,EAEyBC,qBAFzB,EAEgDC,qBAFhD,QAGO,qBAHP;AAIA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOT,KAAK,CAACU,IAAN,CAAW,UAAX,EAAuBD,IAAvB,CAAP;AACD;;AACD,UAAUE,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,IAAI,CAACW,aAAD,EAAgBI,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMb,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,mBADE;AAERO,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAIA,UAAMb,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEP,iBADE;AAERE,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAP,CAAYM;AAFV,KAAD,CAAT;AAID,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,mBADE;AAERa,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeR;AAFd,KAAD,CAAT;AAID;AACF;;AAED,SAASS,eAAT,CAAyBC,MAAzB,EAAiC;AAC/B,SAAOnB,KAAK,CAACoB,GAAN,CAAW,oBAAmBD,MAAM,IAAI,CAAE,EAA1C,CAAP;AACD;;AACD,UAAUE,YAAV,CAAuBT,MAAvB,EAA+B;AAC7B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,IAAI,CAACqB,eAAD,EAAkBN,MAAM,CAACO,MAAzB,CAAzB;AACA,UAAMvB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAET,qBADE;AAERI,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOO,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAER,qBADE;AAERU,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeR;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUa,eAAV,GAA4B;AAC1B,QAAMxB,UAAU,CAACG,mBAAD,EAAsBU,UAAtB,CAAhB;AACD;;AACD,UAAUY,iBAAV,GAA8B;AAC5B,QAAMxB,QAAQ,CAAC,IAAD,EAAOK,qBAAP,EAA8BiB,YAA9B,CAAd;AACD;;AAED,eAAe,UAAUG,WAAV,GAAwB;AACrC,QAAM9B,GAAG,CAAC,CACRC,IAAI,CAAC4B,iBAAD,CADI,EAER5B,IAAI,CAAC2B,eAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, fork, put, call, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n  ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE,\n  LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE,\n} from '../reducers/product';\nimport { ADD_PRODUCT_TO_ME } from '../reducers/user';\n\nfunction addProductAPI(data) {\n  return axios.post('/product', data);\n}\nfunction* addProduct(action) {\n  try {\n    const result = yield call(addProductAPI, action.data);\n    yield put({\n      type: ADD_PRODUCT_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_PRODUCT_TO_ME,\n      data: result.data.id,\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_PRODUCT_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction loadProductsAPI(lastId) {\n  return axios.get(`/products?lastId=${lastId || 0}`);\n}\nfunction* loadProducts(action) {\n  try {\n    const result = yield call(loadProductsAPI, action.lastId);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchAddProduct() {\n  yield takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n}\nfunction* watchLoadProducts() {\n  yield throttle(5000, LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nexport default function* productSaga() {\n  yield all([\n    fork(watchLoadProducts),\n    fork(watchAddProduct),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}